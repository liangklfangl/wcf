#!/usr/bin/env node

/*
  rawArgs:
   [ 'C:\\Program Files\\nodejs\\node.exe',
     'C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules\\webpackcc\\
bin\\wcf',
     '--dev',
     '--devServer' ],
  dev: true,
  devServer: true,
  args: [] }
  //上面是执行wcf命令
  rawArgs:
   [ 'C:\\Program Files\\nodejs\\node.exe',
     'C:\\Users\\Administrator\\Desktop\\wcf\\bin\\wcf',
     '--dev',
     '--devServer' ],
  dev: true,
  devServer: true,
  //上面是执行node命令
 */
const program = require('commander');
program.cwd = process.cwd();
program
    .version(require('../package.json').version, '-v, --version')
    .option('-w, --watch [delay]', 'watch file changes and rebuild')
    // program.watch : If you pass `-w` ,we receive `true` while `-w 100` is `100`
    .option('-h, --hash', 'build with hash')
    .option('--dll <dllWebpackConfigFile>', 'build with ddlplugin')
    //>node ./bin/wcf --dll ./dll/webpack.dll.js
    .option('-m, --manifest <manifest.json>', 'manifest.json to DllReference Plugin')
    .option('--publicPath <publicPath>', 'publicPath for webpack')
    .option('--devtool <devtool>', 'sourcemap generate method, default is null')
    //--devtool cheap-source-map. you must choose one sourceMap type
    .option('--stj <filename>', 'whether to generate stats.json in output folder')
    //wheter to generate stats.json in output folder
    .option('--dev', 'whether is in development mode, default true')
    //wheter is in dev mode
    .option('--devServer', 'whether serve file with webpack-dev-server')
    .option('--htmlTemplate <htmlTemplate>', 'set custom htmlTemplate file')
    .option('--config <customConfigFile>', 'set custom webpack config')
    .option('--demo <custom demo path>', 'set custom demo path config')
    .option('-V, --vendor', 'whether extract vendor.js')
    .option('-D, --disableCSSModules', 'whether disable css modules')
    //set a custom config file while it must export an function receiving our defaultWebpackConfig as parameter
    .parse(process.argv);

if (program.dll && program.manifest) {
    throw new Error("dll means generate manifest.json while manifest is for DllReferencePlugin,can not exist same time!");
}
//DllPlugin invoke
if (program.dll) {
    require("../lib/DllPlugin")(program);
    return;
}

if (program.watch) {
    require('../lib/build')(program);
} else {
    require('../lib/build')(program, function() {
        process.exit(0);
    });
}